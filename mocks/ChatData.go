// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "lesgoobackend/domain"

	mock "github.com/stretchr/testify/mock"
)

// ChatData is an autogenerated mock type for the ChatData type
type ChatData struct {
	mock.Mock
}

// GetToken provides a mock function with given fields: groupID, userID
func (_m *ChatData) GetToken(groupID string, userID uint) []string {
	ret := _m.Called(groupID, userID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, uint) []string); ok {
		r0 = rf(groupID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetUserData provides a mock function with given fields: userID
func (_m *ChatData) GetUserData(userID uint) (domain.User, error) {
	ret := _m.Called(userID)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(uint) domain.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *ChatData) Insert(_a0 domain.Chat) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Chat) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChatData interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatData creates a new instance of ChatData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatData(t mockConstructorTestingTNewChatData) *ChatData {
	mock := &ChatData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
