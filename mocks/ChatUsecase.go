// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "lesgoobackend/domain"

	messaging "firebase.google.com/go/messaging"

	mock "github.com/stretchr/testify/mock"
)

// ChatUsecase is an autogenerated mock type for the ChatUsecase type
type ChatUsecase struct {
	mock.Mock
}

// SendChats provides a mock function with given fields: _a0
func (_m *ChatUsecase) SendChats(_a0 domain.Chat) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Chat) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendNotification provides a mock function with given fields: _a0, _a1, _a2
func (_m *ChatUsecase) SendNotification(_a0 domain.Chat, _a1 *messaging.Client, _a2 context.Context) (int, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Chat, *messaging.Client, context.Context) int); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Chat, *messaging.Client, context.Context) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChatUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatUsecase creates a new instance of ChatUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatUsecase(t mockConstructorTestingTNewChatUsecase) *ChatUsecase {
	mock := &ChatUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
